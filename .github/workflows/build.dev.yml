name: Build and Push Images to OpenShift Registry

on:
  push:
    branches:
      - main

env:
  OPENSHIFT_SERVER: https://api.gold.devops.gov.bc.ca:6443
  IMAGE_REPOSITORY: conservation-tool
  IMAGE_REGISTRY: image-registry.apps.gold.devops.gov.bc.ca

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            workflows:
              - 'workflows/**'

  build-push:
    runs-on: ubuntu-latest
    needs: [changes]
    environment: dev
    env:
      OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
      TOOLS_NAMESPACE: ${{ secrets.TOOLS_NAMESPACE }}
      TOOLS_SA_TOKEN: ${{ secrets.TOOLS_SA_TOKEN }}                  
      IMAGE_TAG: dev
      IMAGE_TAG_LATEST: latest
      GIT_SHA: ${{ github.sha }}
      VALUES: values-dev.yaml
      FORCE_BUILD: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.16"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Log in to OpenShift
        run: |
          oc login --token=$TOOLS_SA_TOKEN --server=$OPENSHIFT_SERVER > /dev/null 2>&1
          oc project $TOOLS_NAMESPACE > /dev/null 2>&1

      - name: Log in to OpenShift internal registry
        run: |
          oc whoami -t | docker login $IMAGE_REGISTRY -u unused --password-stdin

      - name: Build and push frontend image
        working-directory: frontend
        if: needs.changes.outputs.frontend == 'true' || ${{ env.FORCE_BUILD}} == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/frontend"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect server image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true' || ${{ env.FORCE_BUILD}} == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-server"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.server .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect worker image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true' || ${{ env.FORCE_BUILD}} == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-worker"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.worker .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect deploy image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true' || ${{ env.FORCE_BUILD}} == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-deploy"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.deploy .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Deploy via Helm
        working-directory: helm/conservation-tool
        run: |
          # Make sure to use the correct namespace when running Helm
          helm upgrade --install conservation-tool . \
            --values ${VALUES} \
            --namespace ${OPENSHIFT_NAMESPACE} \
            --wait \
            --timeout=10m

name: Build and Push Images to OpenShift Registry

on:
  push:
    branches:
      - main

env:
  OPENSHIFT_SERVER: https://api.gold.devops.gov.bc.ca:6443
  IMAGE_REPOSITORY: conservation-tool
  IMAGE_REGISTRY: image-registry.openshift-image-registry.svc:5000

jobs:
  build-push:
    runs-on: ubuntu-latest
    environment: dev
    env:
      TOOLS_NAMESPACE: ${{ secrets.TOOLS_NAMESPACE }}
      TOOLS_SA_TOKEN: ${{ secrets.TOOLS_SA_TOKEN }}                  
      IMAGE_TAG: dev
      IMAGE_TAG_LATEST: latest
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Check environment variables
        run: |
          echo "TOOLS_NAMESPACE: ${TOOLS_NAMESPACE}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          echo "GIT_SHA: ${GIT_SHA}"
          if [ -z "$TOOLS_SA_TOKEN" ]; then
            echo "TOOLS_SA_TOKEN is NOT set or is empty!"
            exit 1
          else
            echo "TOOLS_SA_TOKEN is set."
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.14"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Log in to OpenShift
        run: |
          oc login --token=$TOOLS_SA_TOKEN --server=$OPENSHIFT_SERVER
          oc project $TOOLS_NAMESPACE

      - name: Log in to OpenShift internal registry
        run: oc registry login

      - name: Build and push frontend image
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-frontend"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} ./frontend/Dockerfile
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect server image
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-server"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./workflows/Dockerfile .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect worker image
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-worker"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./workflows/Dockerfile .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect deploy image
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-deploy"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./workflows/Dockerfile .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Deploy Helm Chart to OpenShift
        run: |
          helm upgrade --install conservation-tool ./helm/conservation-tool \
            --namespace $TOOLS_NAMESPACE \
            --set frontend.image.repository=${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-frontend \
            --set frontend.image.tag=$IMAGE_TAG \
            --set prefectServer.image.repository=${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-server \
            --set prefectServer.image.tag=$IMAGE_TAG \
            --set prefectWorker.image.repository=${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-worker \
            --set prefectWorker.image.tag=$IMAGE_TAG \
            --set prefectDeploy.image.repository=${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${IMAGE_REPOSITORY}-prefect-deploy \
            --set prefectDeploy.image.tag=$IMAGE_TAG \
            --wait

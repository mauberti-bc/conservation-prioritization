name: Build and Push Images to OpenShift Registry

on:
  push:
    branches:
      - main

env:
  OPENSHIFT_SERVER: https://api.gold.devops.gov.bc.ca:6443
  IMAGE_REPOSITORY: conservation-tool
  IMAGE_REGISTRY: image-registry.apps.gold.devops.gov.bc.ca

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      workflows: ${{ steps.changes.outputs.workflows }}
      helm: ${{ steps.changes.outputs.helm }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            workflows:
              - 'workflows/**'
            helm:
              - 'helm/**'

  build-push:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true' }}
    environment: dev
    env:
      TOOLS_NAMESPACE: ${{ secrets.TOOLS_NAMESPACE }}
      TOOLS_SA_TOKEN: ${{ secrets.TOOLS_SA_TOKEN }}                  
      IMAGE_TAG: dev
      IMAGE_TAG_LATEST: latest
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.16"

      - name: Log in to OpenShift
        run: |
          for i in 1 2 3; do
            echo "Attempt $i: Logging into OpenShift..."
            if oc login --token=$SA_TOKEN --server=$OPENSHIFT_SERVER; then
              echo "Login succeeded"
              break
            elif [ "$i" -lt 3 ]; then
              echo "Login failed. Retrying in 5 seconds..."
              sleep 5
            else
              echo "Login failed after 3 attempts."
              exit 1
            fi
          done
          oc project $OPENSHIFT_NAMESPACE

      - name: Log in to OpenShift internal registry
        run: |
          oc whoami -t | docker login $IMAGE_REGISTRY -u unused --password-stdin

      - name: Build and push frontend image
        working-directory: frontend
        if: needs.changes.outputs.frontend == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/frontend"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect server image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-server"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.server .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect worker image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-worker"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.worker .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

      - name: Build and push Prefect deploy image
        working-directory: workflows
        if: needs.changes.outputs.workflows == 'true'
        run: |
          BASE_IMAGE="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/prefect-deploy"
          docker build -t ${BASE_IMAGE}:${IMAGE_TAG} -t ${BASE_IMAGE}:${IMAGE_TAG_LATEST} -t ${BASE_IMAGE}:${GIT_SHA} -f ./Dockerfile.deploy .
          docker push ${BASE_IMAGE}:${IMAGE_TAG}
          docker push ${BASE_IMAGE}:${IMAGE_TAG_LATEST}
          docker push ${BASE_IMAGE}:${GIT_SHA}

  install-helm:
    runs-on: ubuntu-latest
    needs: [build-push]
    if: ${{ always() }}
    environment: dev
    env:
      OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
      SA_TOKEN: ${{ secrets.SA_TOKEN }}
      VALUES: values-dev.yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check required env variables
        run: |
          echo "Checking required environment variables..."
          echo "OPENSHIFT_NAMESPACE is set to: ${OPENSHIFT_NAMESPACE}"
          echo "VALUES file is: ${VALUES}"
          echo "SA_TOKEN is ${SA_TOKEN:+[SET]}"
          echo "OPENSHIFT_SERVER is ${OPENSHIFT_SERVER:+[SET]}"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.16"

      - name: Log in to OpenShift
        run: |
          for i in 1 2 3; do
            echo "Attempt $i: Logging into OpenShift..."
            if oc login --token=$SA_TOKEN --server=$OPENSHIFT_SERVER; then
              echo "Login succeeded"
              break
            elif [ "$i" -lt 3 ]; then
              echo "Login failed. Retrying in 5 seconds..."
              sleep 5
            else
              echo "Login failed after 3 attempts."
              exit 1
            fi
          done
          oc project $OPENSHIFT_NAMESPACE

      - name: Deploy via Helm
        working-directory: helm/conservation-tool
        run: |
          echo "Starting Helm deployment..."
          helm upgrade --install conservation-tool . \
            --values values.yaml \
            --values ${VALUES} \
            --namespace ${OPENSHIFT_NAMESPACE} \
            --wait \
            --timeout=5m \
            --atomic

      - name: Verify deployment
        if: success()
        run: |
          echo "Verifying deployment status..."
          helm status conservation-tool --namespace ${OPENSHIFT_NAMESPACE}
          kubectl get pods --namespace ${OPENSHIFT_NAMESPACE} -l app.kubernetes.io/instance=conservation-tool

      - name: Handle deployment failure
        if: failure()
        run: |
          echo "Deployment failed. Gathering debug information..."
          
          # Show Helm release status
          helm status conservation-tool --namespace ${OPENSHIFT_NAMESPACE} || echo "No release found"
          
          # Show recent Helm history
          helm history conservation-tool --namespace ${OPENSHIFT_NAMESPACE} --max 5 || echo "No history found"
          
          # Show pod status for debugging
          kubectl get pods --namespace ${OPENSHIFT_NAMESPACE} -l app.kubernetes.io/instance=conservation-tool || echo "No pods found"
          
          # Show events for debugging
          kubectl get events --namespace ${OPENSHIFT_NAMESPACE} --sort-by='.lastTimestamp' | tail -20
          
          # Optionally rollback to previous version instead of uninstalling
          echo "Attempting to rollback to previous version..."
          helm rollback conservation-tool --namespace ${OPENSHIFT_NAMESPACE} || echo "Rollback failed or no previous version"
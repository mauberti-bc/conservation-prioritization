name: Reusable Deployment Workflow
on:
  workflow_call:
    inputs:
      source_tag:
        required: true
        type: string
      target_tag:
        required: true
        type: string
      environment:
        required: true
        type: string
      promote_images:
        required: false
        default: true
        type: boolean
env:
  IMAGE_REGISTRY: image-registry.apps.gold.devops.gov.bc.ca
  IMAGE_REPOSITORY: conservation-tool
  OPENSHIFT_SERVER: https://api.gold.devops.gov.bc.ca:6443
jobs:
  promote-images:
    if: ${{ inputs.promote_images }}
    runs-on: ubuntu-latest
    env:
      TOOLS_NAMESPACE: ${{ secrets.TOOLS_NAMESPACE }}
      OC_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
      SOURCE_TAG: ${{ inputs.source_tag }}
      TARGET_TAG: ${{ inputs.target_tag }}
    steps:
      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.16"
      
      - name: Log in to OpenShift
        run: |
          oc login --token=$OC_TOKEN --server=$OPENSHIFT_SERVER
      
      - name: Log in to OpenShift internal registry
        run: |
          # Use the reliable authentication method from your build workflow
          oc whoami -t | docker login $IMAGE_REGISTRY -u unused --password-stdin
      
      - name: Mirror and retag images
        run: |
          for COMPONENT in frontend prefect-server prefect-worker prefect-deploy; do
            # Fixed: Added IMAGE_REPOSITORY prefix to match your build workflow naming
            SRC="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${COMPONENT}:${SOURCE_TAG}"
            DST="${IMAGE_REGISTRY}/${TOOLS_NAMESPACE}/${COMPONENT}:${TARGET_TAG}"
            echo "Promoting $SRC â†’ $DST"
            oc image mirror "$SRC" "$DST"
          done

  deploy:
    needs: ${{ inputs.promote_images && 'promote-images' || '' }}
    if: always() && (needs.promote-images.result == 'success' || needs.promote-images.result == 'skipped' || !inputs.promote_images)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
      TOOLS_NAMESPACE: ${{ secrets.TOOLS_NAMESPACE }}
      OC_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
      TARGET_TAG: ${{ inputs.target_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.16"
      
      - name: Install Helm
        uses: azure/setup-helm@v3
      
      - name: Log in to OpenShift
        run: |
          oc login --token=$OC_TOKEN --server=$OPENSHIFT_SERVER
          oc project $OPENSHIFT_NAMESPACE
      
      - name: Roll Deployments to refresh image pull
        run: |
          echo "Restarting Deployments in namespace: $OPENSHIFT_NAMESPACE"
          oc rollout restart deployment -n $OPENSHIFT_NAMESPACE --all || true
      
      - name: Roll StatefulSets to refresh image pull (if any)
        run: |
          echo "Restarting StatefulSets in namespace: $OPENSHIFT_NAMESPACE"
          if oc get sts -n $OPENSHIFT_NAMESPACE --no-headers 2>/dev/null | grep -q .; then
            for sts in $(oc get sts -n $OPENSHIFT_NAMESPACE -o name); do
              echo "Restarting $sts"
              oc patch "$sts" -n $OPENSHIFT_NAMESPACE -p '{"spec":{"template":{"metadata":{"annotations":{"restarted-at":"'$(date +%s)'"}}}}}'
            done
          else
            echo "No StatefulSets found in namespace $OPENSHIFT_NAMESPACE"
          fi